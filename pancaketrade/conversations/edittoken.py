from decimal import Decimal
from typing import NamedTuple, Optional

from pancaketrade.network import Network
from pancaketrade.persistence import db
from pancaketrade.utils.config import Config
from pancaketrade.utils.generic import chat_message, check_chat_id, format_price_fixed
from pancaketrade.watchers import TokenWatcher
from telegram import InlineKeyboardButton, InlineKeyboardMarkup, Update
from telegram.ext import (
    CallbackContext,
    CallbackQueryHandler,
    CommandHandler,
    ConversationHandler,
    Filters,
    MessageHandler,
)
from web3 import Web3


class EditTokenResponses(NamedTuple):
    ACTION_CHOICE: int = 0
    EMOJI: int = 1
    SLIPPAGE: int = 2
    BUYPRICE: int = 3


class EditTokenConversation:
    def __init__(self, parent, config: Config):
        self.parent = parent
        self.net: Network = parent.net
        self.config = config
        self.next = EditTokenResponses()
        self.handler = ConversationHandler(
            entry_points=[CallbackQueryHandler(self.command_edittoken, pattern='^edittoken:0x[a-fA-F0-9]{40}$')],
            states={
                self.next.ACTION_CHOICE: [
                    CallbackQueryHandler(
                        self.command_edittoken_action, pattern='^emoji$|^slippage$|^buyprice$|^cancel$'
                    )
                ],
                self.next.EMOJI: [
                    MessageHandler(Filters.text & ~Filters.command, self.command_edittoken_emoji),
                    CallbackQueryHandler(self.command_edittoken_emoji, pattern='^[^:]*$'),
                ],
                self.next.SLIPPAGE: [
                    MessageHandler(Filters.text & ~Filters.command, self.command_edittoken_slippage),
                    CallbackQueryHandler(self.command_edittoken_slippage, pattern='^[^:]*$'),
                ],
                self.next.BUYPRICE: [
                    MessageHandler(Filters.text & ~Filters.command, self.command_edittoken_buyprice),
                    CallbackQueryHandler(self.command_edittoken_buyprice, pattern='^[^:]*$'),
                ],
            },
            fallbacks=[CommandHandler('cancel', self.command_canceltoken)],
            name='edittoken_conversation',
        )

    @check_chat_id
    def command_edittoken(self, update: Update, context: CallbackContext):
        assert update.callback_query and context.user_data is not None
        query = update.callback_query
        assert query.data
        token_address = query.data.split(':')[1]
        if not Web3.isChecksumAddress(token_address):
            self.command_error(update, context, text='–ù–µ –≤–µ—Ä–Ω—ã–π –∞–¥—Ä–µ—Å —Ç–æ–∫–µ–Ω–∞.')
            return ConversationHandler.END
        token: TokenWatcher = self.parent.watchers[token_address]
        context.user_data['edittoken'] = {'token_address': token_address}
        buttons = [
            [
                InlineKeyboardButton(f'{token.emoji}–∏–∑–º–µ–Ω–∏—Ç—å emoji', callback_data='emoji'),
                InlineKeyboardButton('–ò–∑–º–µ–Ω–∏—Ç—å —Å—Ç–∞–Ω–¥–∞—Ä—Ç–Ω–æ–µ –ø—Ä–æ—Å–∫–∞–ª—å–∑—ã–≤–∞–Ω–∏–µ', callback_data='slippage'),
            ],
            [
                InlineKeyboardButton('–ò–∑–º–µ–Ω–∏—Ç—å —Ü–µ–Ω—É –ø–æ–∫—É–ø–∫–∏', callback_data='buyprice'),
                InlineKeyboardButton('‚ùå –û—Ç–º–µ–Ω–∞', callback_data='cancel'),
            ],
        ]
        reply_markup = InlineKeyboardMarkup(buttons)
        chat_message(
            update,
            context,
            text=f'–ß—Ç–æ –≤—ã —Ö–æ—Ç–∏—Ç–µ –∏–∑–º–µ–Ω–∏—Ç—å –¥–ª—è —Ç–æ–∫–µ–Ω–∞ {token.name}?',
            reply_markup=reply_markup,
            edit=self.config.update_messages,
        )
        return self.next.ACTION_CHOICE

    @check_chat_id
    def command_edittoken_action(self, update: Update, context: CallbackContext):
        assert update.callback_query and context.user_data is not None
        query = update.callback_query
        assert query.data
        edit = context.user_data['edittoken']
        token: TokenWatcher = self.parent.watchers[edit['token_address']]
        if query.data == 'cancel':
            return self.command_canceltoken(update, context)
        elif query.data == 'emoji':
            buttons = [
                InlineKeyboardButton('üôÖ‚Äç‚ôÇÔ∏è –ë–µ–∑ emoji', callback_data='None'),
                InlineKeyboardButton('‚ùå –û—Ç–º–µ–Ω–∞', callback_data='cancel'),
            ]
            reply_markup = InlineKeyboardMarkup([buttons])
            chat_message(
                update,
                context,
                text=f'–ü–æ–∂–∞–ª—É–π—Å—Ç–∞ –æ—Ç–ø—Ä–∞–≤—å—Ç–µ –º–Ω–µ EMOJI —Å –∫–æ—Ç–æ—Ä–æ–π —É –≤–∞—Å –±—É–¥–µ—Ç –∞—Å—Å–æ—Ü–∏–∏—Ä–æ–≤–∞—Ç—å—Å—è —Ç–æ–∫–µ–Ω {token.symbol} –¥–ª—è –ø—Ä–æ—Å—Ç–æ—Ç—ã –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è, '
                + '–∏–ª–∏ –∫–ª–∏–∫–Ω–∏—Ç–µ –Ω–∞ –∫–Ω–æ–ø–∫—É –Ω–∏–∂–µ.',
                reply_markup=reply_markup,
                edit=self.config.update_messages,
            )
            return self.next.EMOJI
        elif query.data == 'slippage':
            buttons = [
                InlineKeyboardButton(f'Keep {token.default_slippage}%', callback_data=str(token.default_slippage)),
                InlineKeyboardButton('‚ùå –û—Ç–º–µ–Ω–∞', callback_data='cancel'),
            ]
            reply_markup = InlineKeyboardMarkup([buttons])
            chat_message(
                update,
                context,
                text=f'–ö–∞–∫–æ–µ —Å—Ç–∞–Ω–¥–∞—Ä—Ç–Ω–æ–µ –ø—Ä–æ—Å–∫–∞–ª—å–∑—ã–≤–∞–Ω–∏–µ –≤ % –¥–ª—è —Ç–æ—Ä–≥–æ–≤–ª–∏ {token.name} –Ω–∞ PancakeSwap?',
                reply_markup=reply_markup,
                edit=self.config.update_messages,
            )
            return self.next.SLIPPAGE
        elif query.data == 'buyprice':
            current_price, _ = self.net.get_token_price(token_address=token.address)
            current_price_fixed = format_price_fixed(current_price)
            buttons2 = [
                [InlineKeyboardButton('No price (disable profit calc)', callback_data='None')],
                [InlineKeyboardButton('‚ùå –û—Ç–º–µ–Ω–∞', callback_data='cancel')],
            ]
            reply_markup = InlineKeyboardMarkup(buttons2)
            chat_message(
                update,
                context,
                text=f'–ö–∞–∫–æ–≤–∞ –±—ã–ª–∞ —ç—Ñ—Ñ–µ–∫—Ç–∏–≤–Ω–∞—è —Ü–µ–Ω–∞ –¥–ª—è –ø–æ–∫—É–ø–∫–∏ (–ø–æ—Å–ª–µ –∫–æ–º–∏—Å—Å–∏–∏) –¥–ª—è {token.name} –∫–æ—Ç–æ—Ä—É—é –≤—ã –∏–Ω–≤–µ—Å—Ç–∏–∏—Ä–æ–≤–∞–ª–∏? '
                + '–£ –≤–∞—Å –µ—Å—Ç—å 3 –æ–ø—Ü–∏–∏ –¥–ª—è —ç—Ç–æ–≥–æ:\n'
                + f' „Éª –°—Ç–∞–Ω–¥–∞—Ä—Ç–Ω–∞—è –∑–∞–ø–∏—Å—å –Ω–∞–ø—Ä–∏–º–µ—Ä "<code>{current_price_fixed}</code>"\n'
                + f' „Éª –ù–∞—É—á–Ω–∞—è –∑–∞–ø–∏—Å—å –Ω–∞–ø—Ä–∏–º–µ—Ä "<code>{current_price:.1e}</code>"\n'
                + ' „Éª –°—É–º–º–∞ –≤–∞—à–µ–π –ø–æ–∫—É–ø–∫–∏ –≤ BNB –Ω–∞–ø—Ä–∏–º–µ—Ä "<code>0.5BNB</code>" (–≤–∫–ª—é—á–∞—è "BNB" –≤ –∫–æ–Ω—Ü–µ)\n',
                reply_markup=reply_markup,
                edit=self.config.update_messages,
            )
            return self.next.BUYPRICE
        else:
            self.command_error(update, context, text='Invalid callback')
            return ConversationHandler.END

    @check_chat_id
    def command_edittoken_emoji(self, update: Update, context: CallbackContext):
        assert context.user_data is not None
        edit = context.user_data['edittoken']
        token: TokenWatcher = self.parent.watchers[edit['token_address']]
        if update.message is not None:
            assert update.message.text
            edit['icon'] = update.message.text.strip()
        else:
            assert update.callback_query
            query = update.callback_query
            assert query.data
            if query.data == 'cancel':
                return self.command_canceltoken(update, context)
            elif query.data == 'None':
                edit['icon'] = None
            else:
                edit['icon'] = query.data

        token_record = token.token_record
        try:
            db.connect()
            with db.atomic():
                token_record.icon = edit['icon']
                token_record.save()
        except Exception as e:
            self.command_error(update, context, text=f'Failed to update database record: {e}')
            return ConversationHandler.END
        finally:
            del context.user_data['edittoken']
            db.close()
        token.emoji = token_record.icon + ' ' if token_record.icon else ''
        token.name = token.emoji + token.symbol
        chat_message(
            update,
            context,
            text=f'‚úÖ –•–æ—Ä–æ—à–æ, —Ç–æ–∫–µ–Ω –±—É–¥–µ—Ç –ø–æ–∫–∞–∑—ã–≤–∞—Ç—å—Å—è –∫–∞–∫ <b>"{token.name}"</b>. ',
            edit=self.config.update_messages,
        )
        return ConversationHandler.END

    @check_chat_id
    def command_edittoken_slippage(self, update: Update, context: CallbackContext):
        assert context.user_data is not None
        edit = context.user_data['edittoken']
        token: TokenWatcher = self.parent.watchers[edit['token_address']]
        if update.message is not None:
            assert update.message.text
            try:
                slippage = Decimal(update.message.text.strip())
            except Exception:
                chat_message(
                    update,
                    context,
                    text='‚ö†Ô∏è –≠—Ç–æ –Ω–µ —è–≤–ª—è–µ—Ç—Å—è –¥–µ–π—Å—Ç–≤–∏—Ç–µ–ª—å–Ω—ã–º –∑–Ω–∞—á–µ–Ω–∏–µ–º –ø—Ä–æ—Å–∫–∞–ª—å–∑—ã–≤–∞–Ω–∏—è. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞ –≤–≤–µ–¥–∏—Ç–µ –∑–Ω–∞—á–µ–Ω–∏–µ –º–µ–∂–¥—É 0.01 –∏ 100 '
                    + '–ø—Ä–æ—Ü–µ–Ω—Ç–æ–≤ (–±–µ–∑ –∑–∞–ø–∏—Å–∏ –∑–Ω–∞–∫–∞ –ø—Ä–æ—Ü–µ–Ω—Ç–∞). –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –∑–∞–Ω–æ–≤–æ:',
                    edit=False,
                )
                return self.next.SLIPPAGE
        else:
            assert update.callback_query
            query = update.callback_query
            assert query.data
            if query.data == 'cancel':
                return self.command_canceltoken(update, context)
            try:
                slippage = Decimal(query.data)
            except Exception:
                self.command_error(update, context, text='–ù–µ –≤–µ—Ä–Ω–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ —Å—Ç–∞–Ω–¥–∞—Ä—Ç–Ω–æ–≥–æ –ø—Ä–æ—Å–∫–∞–ª—å–∑—ã–≤–∞–Ω–∏—è.')
                return ConversationHandler.END
        if slippage < Decimal("0.01") or slippage > 100:
            chat_message(
                update,
                context,
                text='‚ö†Ô∏è –≠—Ç–æ –Ω–µ —è–≤–ª—è–µ—Ç—Å—è –¥–µ–π—Å—Ç–≤–∏—Ç–µ–ª—å–Ω—ã–º –∑–Ω–∞—á–µ–Ω–∏–µ–º –ø—Ä–æ—Å–∫–∞–ª—å–∑—ã–≤–∞–Ω–∏—è. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞ –≤–≤–µ–¥–∏—Ç–µ –∑–Ω–∞—á–µ–Ω–∏–µ –º–µ–∂–¥—É 0.01 –∏ 100 '
                + '–ø—Ä–æ—Ü–µ–Ω—Ç–æ–≤. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –∑–∞–Ω–æ–≤–æ:',
                edit=False,
            )
            return self.next.SLIPPAGE
        edit['default_slippage'] = f'{slippage:.2f}'

        token_record = token.token_record
        try:
            db.connect()
            with db.atomic():
                token_record.default_slippage = edit['default_slippage']
                token_record.save()
        except Exception as e:
            self.command_error(update, context, text=f'Failed to update database record: {e}')
            return ConversationHandler.END
        finally:
            del context.user_data['edittoken']
            db.close()
        token.default_slippage = Decimal(token_record.default_slippage)
        chat_message(
            update,
            context,
            text=f'‚úÖ –•–æ—Ä–æ—à–æ, —Ç–æ–∫–µ–Ω {token.name} '
            + f'–±—É–¥–µ—Ç –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å <b>{edit["default_slippage"]}%</b> –ø—Ä–æ—Å–∫–∞–ª—å–∑—ã–≤–∞–Ω–∏–µ –∫–∞–∫ —Å—Ç–∞–Ω–¥–∞—Ä—Ç–Ω–æ–µ.',
            edit=self.config.update_messages,
        )
        return ConversationHandler.END

    @check_chat_id
    def command_edittoken_buyprice(self, update: Update, context: CallbackContext):
        assert context.user_data is not None
        edit = context.user_data['edittoken']
        token: TokenWatcher = self.parent.watchers[edit['token_address']]
        effective_buy_price: Optional[Decimal]
        if update.message is not None:
            assert update.message.text
            user_input = update.message.text.strip().lower()
            if 'bnb' in user_input:
                balance = self.net.get_token_balance(token_address=token.address)
                if balance == 0:  # would lead to division by zero
                    chat_message(
                        update,
                        context,
                        text='‚ö†Ô∏è –ë–∞–ª–∞–Ω—Å —Ç–æ–∫–µ–Ω–∞ —Ä–∞–≤–µ–Ω 0, –Ω–µ–ª—å–∑—è –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å —Ä–∞—Å—á–µ—Ç –æ—Ç —Å—É–º–º—ã BNB. '
                        + '–ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑, —É–∫–∞–∑–∞–≤ —Ü–µ–Ω—É:',
                        edit=False,
                    )
                    return self.next.BUYPRICE
                try:
                    buy_amount = Decimal(user_input[:-3])
                except Exception:
                    chat_message(
                        update, context, text='‚ö†Ô∏è –í–≤–µ–¥–µ–Ω–Ω–∞—è –≤–∞–º–∏ —Å—É–º–º–∞ BNB –Ω–µ–¥–µ–π—Å—Ç–≤–∏—Ç–µ–ª—å–Ω–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –∑–∞–Ω–æ–≤–æ:', edit=False
                    )
                    return self.next.BUYPRICE
                effective_buy_price = buy_amount / balance
            else:
                try:
                    effective_buy_price = Decimal(user_input)
                except ValueError:
                    chat_message(
                        update,
                        context,
                        text='‚ö†Ô∏è –≠—Ç–æ –Ω–µ –¥–µ–π—Å—Ç–≤–∏—Ç–µ–ª—å–Ω–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ —Ü–µ–Ω—ã. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –∑–∞–Ω–æ–≤–æ:',
                        edit=False,
                    )
                    return self.next.BUYPRICE
        else:
            assert update.callback_query
            query = update.callback_query
            assert query.data
            if query.data == 'cancel':
                return self.command_canceltoken(update, context)
            elif query.data == 'None':
                effective_buy_price = None
            else:
                self.command_error(update, context, text='Invalid callback.')
                return ConversationHandler.END

        edit['effective_buy_price'] = effective_buy_price

        token_record = token.token_record
        try:
            db.connect()
            with db.atomic():
                token_record.effective_buy_price = (
                    str(edit['effective_buy_price']) if edit['effective_buy_price'] else None
                )
                token_record.save()
        except Exception as e:
            self.command_error(update, context, text=f'Failed to update database record: {e}')
            return ConversationHandler.END
        finally:
            del context.user_data['edittoken']
            db.close()
        token.effective_buy_price = edit['effective_buy_price']
        if effective_buy_price is None:
            chat_message(
                update,
                context,
                text='‚úÖ –•–æ—Ä–æ—à–æ, —ç—Ñ—Ñ–µ–∫—Ç–∏–≤–Ω–∞—è —Ü–µ–Ω–∞ –ø–æ–∫—É–ø–∫–∏ –¥–ª—è —Ä–∞—Å—á–µ—Ç–∞ –ø—Ä–∏–±—ã–ª–∏ –æ—Ç–∫–ª—é—á–µ–Ω–∞.',
                edit=self.config.update_messages,
            )
        else:
            chat_message(
                update,
                context,
                text=f'‚úÖ –•–æ—Ä–æ—à–æ, —Ç–æ–∫–µ–Ω {token.name} '
                + f'–±—ã–ª –∫—É–ø–ª–µ–Ω {token.effective_buy_price:.4g} BNB –∑–∞ —Ç–æ–∫–µ–Ω.',
                edit=self.config.update_messages,
            )
        return ConversationHandler.END

    @check_chat_id
    def command_canceltoken(self, update: Update, context: CallbackContext):
        assert context.user_data is not None
        del context.user_data['edittoken']
        chat_message(update, context, text='‚ö†Ô∏è OK, —è –æ—Ç–º–µ–Ω—è—é –∫–æ–º–∞–Ω–¥—É.', edit=False)
        return ConversationHandler.END

    def command_error(self, update: Update, context: CallbackContext, text: str):
        assert context.user_data is not None
        del context.user_data['edittoken']
        chat_message(update, context, text=f'‚õîÔ∏è {text}', edit=False)
