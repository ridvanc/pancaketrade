from typing import NamedTuple
from decimal import Decimal

from pancaketrade.network import Network
from pancaketrade.persistence import Token, db
from pancaketrade.utils.config import Config
from pancaketrade.utils.db import token_exists
from pancaketrade.utils.generic import chat_message, check_chat_id, format_token_amount
from pancaketrade.watchers import TokenWatcher
from telegram import InlineKeyboardButton, InlineKeyboardMarkup, Update
from telegram.ext import (
    CallbackContext,
    CallbackQueryHandler,
    CommandHandler,
    ConversationHandler,
    Filters,
    MessageHandler,
)
from web3 import Web3
from web3.exceptions import ABIFunctionNotFound, ContractLogicError


class AddTokenResponses(NamedTuple):
    ADDRESS: int = 0
    EMOJI: int = 1
    SLIPPAGE: int = 2


class AddTokenConversation:
    def __init__(self, parent, config: Config):
        self.parent = parent
        self.net: Network = parent.net
        self.config = config
        self.next = AddTokenResponses()
        self.handler = ConversationHandler(
            entry_points=[CommandHandler('addtoken', self.command_addtoken)],
            states={
                self.next.ADDRESS: [MessageHandler(Filters.text & ~Filters.command, self.command_addtoken_address)],
                self.next.EMOJI: [
                    MessageHandler(Filters.text & ~Filters.command, self.command_addtoken_emoji),
                    CallbackQueryHandler(self.command_addtoken_noemoji, pattern='^None$'),
                ],
                self.next.SLIPPAGE: [MessageHandler(Filters.text & ~Filters.command, self.command_addtoken_slippage)],
            },
            fallbacks=[CommandHandler('cancel', self.command_canceltoken)],
            name='addtoken_conversation',
        )

    @check_chat_id
    def command_addtoken(self, update: Update, context: CallbackContext):
        assert context.user_data is not None
        context.user_data['addtoken'] = {}
        chat_message(update, context, text='–ü–æ–∂–∞–ª—É–π—Å—Ç–∞ –æ—Ç–ø—Ä–∞–≤—å—Ç–µ –º–Ω–µ –∞–¥—Ä–µ—Å –∫–æ–Ω—Ç—Ä–∞–∫—Ç–∞ —Ç–æ–∫–µ–Ω–∞.', edit=False)
        return self.next.ADDRESS

    @check_chat_id
    def command_addtoken_address(self, update: Update, context: CallbackContext):
        assert update.message and update.message.text and context.user_data is not None
        response = update.message.text.strip()
        if Web3.isAddress(response):
            token_address = Web3.toChecksumAddress(response)
        else:
            chat_message(
                update, context, text='‚ö†Ô∏è –£–∫–∞–∑–∞–Ω–Ω—ã–π –≤–∞–º–∏ –∞–¥—Ä–µ—Å –Ω–µ —è–≤–ª—è–µ—Ç—Å—è –¥–µ–π—Å—Ç–≤–∏—Ç–µ–ª—å–Ω—ã–º. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞:', edit=False
            )
            return self.next.ADDRESS
        add = context.user_data['addtoken']
        add['address'] = str(token_address)
        try:
            add['decimals'] = self.net.get_token_decimals(token_address)
            add['symbol'] = self.net.get_token_symbol(token_address)
        except (ABIFunctionNotFound, ContractLogicError):
            chat_message(
                update,
                context,
                text='‚õî –ù–µ–≤–µ—Ä–Ω–æ–µ ABI –¥–ª—è —ç—Ç–æ–≥–æ –∞–¥—Ä–µ—Å–∞.\n'
                + '–£–±–µ–¥–∏—Ç–µ—Å—å —á—Ç–æ –∞–¥—Ä–µ—Å —è–≤–ª—è–µ—Ç—Å—è —Å–º–∞—Ä—Ç–∫–æ–Ω—Ç—Ä–∞–∫—Ç–æ–º '
                + f'<a href="https://bscscan.com/address/{token_address}">BscScan</a> –∏ –ø–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞.',
                edit=False,
            )
            del context.user_data['addtoken']
            return ConversationHandler.END

        if token_exists(address=token_address):
            chat_message(update, context, text=f'‚ö†Ô∏è –¢–æ–∫–µ–Ω <b>{add["symbol"]}</b> —É–∂–µ –¥–æ–±–∞–≤–ª–µ–Ω.', edit=False)
            del context.user_data['addtoken']
            return ConversationHandler.END
        reply_markup = InlineKeyboardMarkup([[InlineKeyboardButton('üôÖ‚Äç‚ôÇÔ∏è No emoji', callback_data='None')]])
        chat_message(
            update,
            context,
            text=f'–°–ø–∞—Å–∏–±–æ, —Ç–æ–∫–µ–Ω <b>{add["symbol"]}</b> –∏—Å–ø–æ–ª—å–∑—É–µ—Ç '
            + f'{add["decimals"]} decimals. '
            + '–ü–æ–∂–∞–ª—É–π—Å—Ç–∞ –æ—Ç–ø—Ä–∞–≤—å—Ç–µ –º–Ω–µ EMOJI —Å –∫–æ—Ç–æ—Ä–æ–π —É –≤–∞—Å –±—É–¥–µ—Ç –∞—Å—Å–æ—Ü–∏–∏—Ä–æ–≤–∞—Ç—å—Å—è —Ç–æ–∫–µ–Ω –¥–ª—è –ø—Ä–æ—Å—Ç–æ—Ç—ã –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è, '
            + '–∏–ª–∏ –∫–ª–∏–∫–Ω–∏—Ç–µ –Ω–∞ –∫–Ω–æ–ø–∫—É –Ω–∏–∂–µ.',
            reply_markup=reply_markup,
            edit=False,
        )
        return self.next.EMOJI

    @check_chat_id
    def command_addtoken_emoji(self, update: Update, context: CallbackContext):
        assert update.message and update.message.text and context.user_data is not None
        add = context.user_data['addtoken']
        add['icon'] = update.message.text.strip()
        chat_message(
            update,
            context,
            text='–•–æ—Ä–æ—à–æ, —Ç–æ–∫–µ–Ω –±—É–¥–µ—Ç –ø–æ–∫–∞–∑—ã–≤–∞—Ç—å—Å—è –∫–∞–∫ '
            + f'<b>"{add["icon"]} {add["symbol"]}"</b>. '
            + '–ö–∞–∫–æ–µ —Å—Ç–∞–Ω–¥–∞—Ä—Ç–Ω–æ–µ –ø—Ä–æ—Å–∫–∞–ª—å–∑—ã–≤–∞–Ω–∏–µ –≤ % –¥–ª—è —Ç–æ—Ä–≥–æ–≤–ª–∏ –Ω–∞ PancakeSwap?',
            edit=False,
        )
        return self.next.SLIPPAGE

    @check_chat_id
    def command_addtoken_noemoji(self, update: Update, context: CallbackContext):
        assert context.user_data is not None
        add = context.user_data['addtoken']
        add['icon'] = None
        chat_message(
            update,
            context,
            text=f'–•–æ—Ä–æ—à–æ, —Ç–æ–∫–µ–Ω –±—É–¥–µ—Ç –ø–æ–∫–∞–∑—ã–≤–∞—Ç—å—Å—è –∫–∞–∫ <b>"{add["symbol"]}"</b>. '
            + '–ö–∞–∫–æ–µ —Å—Ç–∞–Ω–¥–∞—Ä—Ç–Ω–æ–µ –ø—Ä–æ—Å–∫–∞–ª—å–∑—ã–≤–∞–Ω–∏–µ –≤ % –¥–ª—è —Ç–æ—Ä–≥–æ–≤–ª–∏ –Ω–∞ PancakeSwap?',
            edit=self.config.update_messages,
        )
        return self.next.SLIPPAGE

    @check_chat_id
    def command_addtoken_slippage(self, update: Update, context: CallbackContext):
        assert update.message and update.message.text and context.user_data is not None
        try:
            slippage = Decimal(update.message.text.strip())
        except Exception:
            chat_message(
                update,
                context,
                text='‚ö†Ô∏è –≠—Ç–æ –Ω–µ —è–≤–ª—è–µ—Ç—Å—è –¥–µ–π—Å—Ç–≤–∏—Ç–µ–ª—å–Ω—ã–º –∑–Ω–∞—á–µ–Ω–∏–µ–º –ø—Ä–æ—Å–∫–∞–ª—å–∑—ã–≤–∞–Ω–∏—è. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞ –≤–≤–µ–¥–∏—Ç–µ –∑–Ω–∞—á–µ–Ω–∏–µ –≤ –ø—Ä–æ—Ü–µ–Ω—Ç–∞—Ö. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞:',
                edit=False,
            )
            return self.next.SLIPPAGE
        if slippage < Decimal("0.01") or slippage > 100:
            chat_message(
                update,
                context,
                text='‚ö†Ô∏è –≠—Ç–æ –Ω–µ —è–≤–ª—è–µ—Ç—Å—è –¥–µ–π—Å—Ç–≤–∏—Ç–µ–ª—å–Ω—ã–º –∑–Ω–∞—á–µ–Ω–∏–µ–º –ø—Ä–æ—Å–∫–∞–ª—å–∑—ã–≤–∞–Ω–∏—è. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞ –≤–≤–µ–¥–∏—Ç–µ –∑–Ω–∞—á–µ–Ω–∏–µ –º–µ–∂–¥—É 0.01 –∏ 100 '
                + '–ø—Ä–æ—Ü–µ–Ω—Ç–æ–≤. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞:',
                edit=False,
            )
            return self.next.SLIPPAGE
        add = context.user_data['addtoken']
        add['default_slippage'] = f'{slippage:.2f}'
        emoji = add['icon'] + ' ' if add['icon'] else ''

        chat_message(
            update,
            context,
            text=f'–•–æ—Ä–æ—à–æ, —Ç–æ–∫–µ–Ω <b>{emoji}{add["symbol"]}</b> '
            + f'–±—É–¥–µ—Ç –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å <b>{add["default_slippage"]}%</b> –ø—Ä–æ—Å–∫–∞–ª—å–∑—ã–≤–∞–Ω–∏–µ –∫–∞–∫ —Å—Ç–∞–Ω–¥–∞—Ä—Ç–Ω–æ–µ.',
            edit=False,
        )
        try:
            db.connect()
            with db.atomic():
                token_record = Token.create(**add)
        except Exception as e:
            chat_message(update, context, text=f'‚õî Failed to create database record: {e}', edit=False)
            del context.user_data['addtoken']
            return ConversationHandler.END
        finally:
            del context.user_data['addtoken']
            db.close()
        token = TokenWatcher(token_record=token_record, net=self.net, dispatcher=context.dispatcher, config=self.config)
        self.parent.watchers[token.address] = token
        balance = self.net.get_token_balance(token_address=token.address)
        balance_usd = self.net.get_token_balance_usd(token_address=token.address, balance=balance)
        buttons = [
            [
                InlineKeyboardButton('‚ûï –°–æ–∑–¥–∞—Ç—å –æ—Ä–¥–µ—Ä', callback_data=f'addorder:{token.address}'),
                InlineKeyboardButton('üí∞ –ö—É–ø–∏—Ç—å/–ü—Ä–æ–¥–∞—Ç—å —Å–µ–π—á–∞—Å', callback_data=f'buysell:{token.address}'),
            ]
        ]
        if not self.net.is_approved(token_address=token.address):
            buttons.append([InlineKeyboardButton('‚òëÔ∏è –ø–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç—å –¥–ª—è –ø—Ä–æ–¥–∞–∂–∏', callback_data=f'approve:{token.address}')])
        reply_markup = InlineKeyboardMarkup(buttons)
        chat_message(
            update,
            context,
            text='‚úÖ –¢–æ–∫–µ–Ω –¥–æ–±–∞–≤–ª–µ–Ω —É—Å–ø–µ—à–Ω–æ. '
            + f'–ë–∞–ª–∞–Ω—Å  {format_token_amount(balance)} {token.symbol} (${balance_usd:.2f}).',
            reply_markup=reply_markup,
            edit=False,
        )
        return ConversationHandler.END

    @check_chat_id
    def command_canceltoken(self, update: Update, context: CallbackContext):
        assert context.user_data is not None
        del context.user_data['addtoken']
        chat_message(update, context, text='‚ö†Ô∏è OK, –Ø –æ—Ç–º–µ–Ω—è—é —ç—Ç—É –∫–æ–º–∞–Ω–¥—É.', edit=False)
        return ConversationHandler.END
